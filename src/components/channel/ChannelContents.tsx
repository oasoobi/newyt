"use client"
import { useEffect, useState } from "react";
import { Video as VideoCard } from "../cards/video"
import { Playlist as PlaylistCard } from "../cards/playlist";
import useSWR from "swr";
import { useRouter, useSearchParams } from "next/navigation";
type Channel = {
  "author": string,
  "authorId": string,
  "authorUrl": string,
  "authorVerified": boolean,
  "authorBanners": ImageObject[],
  "authorThumbnails": ImageObject[],

  "subCount": number, // Integer
  "totalViews": number, // Integer
  "joined": number, // Unix timestamp

  "autoGenerated": boolean,
  "isFamilyFriendly": boolean,

  "description": string,
  "descriptionHtml": string,
  "allowedRegions": string[],

  "tabs": string[],

  "latestVideos": Video[],
  "relatedChannels": [
    // One or more ChannelObject
  ]
}

type ImageObject = {
  "url": string,
  "width": number, // Integer
  "height": number // Integer
}

type Video = {
  "type": "video", // Constant

  "title": string,
  "videoId": string,

  "author": string,
  "authorId": string,
  "authorUrl": string,
  "authorVerified": boolean,

  "videoThumbnails": ThumbnailObject[],

  "description": string,
  "descriptionHTML": string,

  "viewCount": number, // Integer
  "viewCountText": string,
  "lengthSeconds": number, // Integer

  "published": number, // Unix timestamp
  "publishedText": string,

  // Only available on premiered videos
  "premiereTimestamp": number, // Unix timestamp

  "liveNow": boolean,
  "premium": boolean,
  "isUpcoming": boolean
}

type ThumbnailObject = {
  "quality": string,
  "url": string,
  "width": number, // Integer
  "height": number // Integer
}

type Videos = {
  videos: Video[],
  continuation?: string
}

type Playlists = {
  playlists: Playlist[],
  continuation?: string
}

type Playlist = {
  "type": "playlist", // Constant

  "title": string,
  "playlistId": string,
  "playlistThumbnail": string,

  "author": string,
  "authorId": string,
  "authorUrl": string,
  "authorVerified": boolean,
  "videoCount": number, // Integer
  "videos": [
    {
      "title": string,
      "videoId": string,
      "lengthSeconds": number, // Integer
      "videoThumbnails": ThumbnailObject[]
    }
  ]
}



async function fetcher(key: string) {
  return fetch(key).then((res) => res.json() as Promise<Videos | Playlists | null>);
}

export function ChannelContents({ channelID }: { channelID: string }) {
  const searchParams = useSearchParams();
  console.log(searchParams.get("tab"));
  const changeTab = (tab: string) => {
    setChannelTab(tab);
    setContinuation(""); // Reset continuation when tab changes
    router.push(`?tab=${tab}`)
    if (tab == "playlists") {
      setContents({ playlists: [] });
    } else {
      setContents({ videos: [] });
    }
  };
  const [continuation, setContinuation] = useState<string>("");
  const [Contents, setContents] = useState<Playlists | Videos>({ videos: [] });
  const router = useRouter();
  const [channelTab, setChannelTab] = useState<string>("");

  const { data, error, isLoading, mutate } = useSWR(
    `/api/ch/${channelID}/${channelTab}${continuation && continuation !== "null" ? "?continuation=" + continuation : ""}`,
    fetcher
  );
  useEffect(() => {
    if (Contents && "videos" in Contents && data && "videos" in data) {
      setContents({ videos: [...Contents.videos, ...data.videos] });
    } else if (Contents && "playlists" in Contents && data && "playlists" in data) {
      setContents({ playlists: [...Contents.playlists, ...data.playlists] });
    }
  }, [data])

  useEffect(() => {
    changeTab(searchParams.get("tab") ?? "videos");
  }, [])

  return (
    <div>
      <div className="flex align-center gap-2 mt-6 mb-2 h-10 min-w-full sticky top-0">
        <button onClick={() => { changeTab("videos") }} className={`border-b-2 px-1 ${channelTab == "videos" ? "border-black" : ""}`}>動画</button>
        <button onClick={() => { changeTab("playlists") }} className={`border-b-2 px-1 ${channelTab == "playlists" ? "border-black" : ""}`}>再生リスト</button>
        <button onClick={() => { changeTab("streams") }} className={`border-b-2 px-1 ${channelTab == "streams" ? "border-black" : ""}`}>ストリーム</button>
      </div>
      <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-3 gap-5">
        {Contents ?
          ("videos" in Contents ? (
            Contents.videos.length > 0 ? (
              Contents.videos.map((video) => (
                <VideoCard key={video.videoId} video={video} />
              ))
            ) : (
              isLoading ? <p>読み込み中...</p> : <p>Nothing :(</p>
            )
          ) : (
            Contents.playlists.length > 0 ? (
              Contents.playlists.map((playlist) => (
                <PlaylistCard key={playlist.playlistId} playlist={playlist} />
              ))
            ) : (
              isLoading ? <p>読み込み中...</p> : <p>Nothing :(</p>
            )

          )
          ) : isLoading ? <p>読み込み中...</p> : <p>Nothing :(</p>
        }
      </div>
      {
        data?.continuation ? <button className={`w-full border mt-5 h-14 rounded-md transition-colors hover:bg-gray-100 ${isLoading ? "bg-gray-100" : ""}`} disabled={isLoading} onClick={() => {
          setContinuation(data?.continuation ?? "");
        }}>{isLoading ? "読み込み中..." : "もっと読み込む"}</button> : <></>
      }
    </div>
  )
}