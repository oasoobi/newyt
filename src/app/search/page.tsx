"use client"

import { useEffect, useState } from "react";
import useSWR, { mutate } from "swr";
import { useSearchParams } from "next/navigation"
import { Video as VideoCard } from "@/components/cards/video";
import { Channel as ChannelCard} from "@/components/cards/channel";
import { Playlist as PlaylistCard} from "@/components/cards/playlist";
type Video = {
    "type": string,
    "title": string,
    "videoId": string,
    "author": string,
    "authorId": string,
    "authorUrl": string,
    "authorVerified": boolean,
    "videoThumbnails": {
        "quality": string,
        "url": string
        "width": number,
        "height": number
    }[],
    "description": string,
    "descriptionHTML": string,
    "viewCount": number,
    "viewCountText": string,
    "published": number,
    "publishedText": string,
    "lengthSeconds": number,
    "liveNow": boolean,
    "premium": boolean,
    "isUpcoming": boolean
}

type Channel = {
    "type": string,
    "author": string,
    "authorId": string,
    "authorUrl": string,
    "authorVerified": boolean,
    "authorThumbnails": {
        "url": string
        "width": number,
        "height": number
    }[],
    "autoGenerated": boolean,
    "subCount": number,
    "videoCount": number,
    "channelHandle": string,
    "description": string,
    "descriptionHtml": string
}

type Playlist = {
    type: string;
    title: string;
    playlistId: string;
    playlistThumbnail: string;
    author: string;
    authorId: string;
    authorUrl: string;
    authorVerified: boolean;
    videoCount: number;
    videos: {
        title: string;
        videoId: string;
        lengthSeconds: number;
        videoThumbnails: {
            quality: string;
            url: string;
            width: number;
            height: number;
        }[];
    }[];
};


type searchResult = (Video | Channel | Playlist)[];

async function fetcher(key: string) {
    return fetch(key).then((res) => res.json() as Promise<searchResult | null>);
}

export default function Home() {
    const params = useSearchParams();
    const [word, setWord] = useState(params.get("q"));
    const [results, setResults] = useState([]);
    const [page, setPage] = useState(1);


    // クエリパラメーターが変更された場合に `word` を更新
    useEffect(() => {
        setWord(params.get("q"));
        setResults([]);
    }, [params]);

    const { data, error, isLoading } = useSWR(
        word ? (`/api/s?q=` + word + "&p=" + page) : null,
        fetcher
    );

    useEffect(() => {
        if (data) {
            setResults(prevResults => [...prevResults, ...data]);
        }
    }, [data]);

    const getMoreResults = () => {
        setPage(prevPage => prevPage + 1);
        mutate(word ? (`/api/s?q=` + word + "&p=" + page) : null)
    }

    return (
        <main className="p-6 lg:p-24">
            <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-5">
                {results?.map((data,index) =>
                    data.type == "video" ? <VideoCard video={data} key={index} /> : 
                    data.type == "playlist" ? <PlaylistCard playlist={data} key={index} /> : 
                    <ChannelCard channel={data} key={index} />)}
            </div>
            <button type="button" className={`w-full border mt-5 h-14 rounded-md transition-colors hover:bg-gray-100 ${isLoading ? "bg-gray-100" : ""}`} onClick={getMoreResults} disabled={isLoading}>{ isLoading ? "読み込み中..." : "もっと読み込む"}</button>
        </main>
    );
}
