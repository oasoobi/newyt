import Image from "next/image";
import { ChannelVideos } from "@/components/ChannelVideos";
import Link from "next/link";
import { ChannelContents } from "@/components/ChannelContents";

type Channel = {
  "author": string,
  "authorId": string,
  "authorUrl": string,
  "authorVerified": boolean,
  "authorBanners": ImageObject[],
  "authorThumbnails": ImageObject[],

  "subCount": number, // Integer
  "totalViews": number, // Integer
  "joined": number, // Unix timestamp

  "autoGenerated": boolean,
  "isFamilyFriendly": boolean,

  "description": string,
  "descriptionHtml": string,
  "allowedRegions": string[],

  "tabs": string[],

  "latestVideos": Video[],
  "relatedChannels": [
    // One or more ChannelObject
  ]
}

type ImageObject = {
  "url": string,
  "width": number, // Integer
  "height": number // Integer
}

type Video = {
  "type": "video", // Constant

  "title": string,
  "videoId": string,

  "author": string,
  "authorId": string,
  "authorUrl": string,
  "authorVerified": boolean,

  "videoThumbnails": ThumbnailObject[],

  "description": string,
  "descriptionHTML": string,

  "viewCount": number, // Integer
  "viewCountText": string,
  "lengthSeconds": number, // Integer

  "published": number, // Unix timestamp
  "publishedText": string,

  // Only available on premiered videos
  "premiereTimestamp": number, // Unix timestamp

  "liveNow": boolean,
  "premium": boolean,
  "isUpcoming": boolean
}

type ThumbnailObject = {
  "quality": string,
  "url": string,
  "width": number, // Integer
  "height": number // Integer
}

export default async function Home({ params }: { params: { channelID: string } }) {
  const channelID = params.channelID;

  const res = await fetch(`https://invidious.jing.rocks/api/v1/channels/` + channelID + "?hl=ja");
  const data = await res.json()
  return (
    <main className="flex min-h-screen flex-col items-center pl-12 pr-12 mb-20">
      <div className="mt-[7rem] px-6 w-full">
        {
          data?.authorBanners && data?.authorBanners.length > 0 ? <img src={data?.authorBanners[0].url as string} alt="" className="mb-5 rounded-md" /> :
            <></>
        }
        <div className="flex items-start">
          <img className="rounded-full border" src={data?.authorThumbnails[3].url} width={150} height={150} alt="" />
          <div className="ml-4">
            <h1 className="text-4xl font-bold">{data?.author}</h1>
            <p>チャンネル登録者数 {data?.subCount} 人</p>
            <div className="h-[6em] w-full overflow-hidden whitespace">{data?.description}</div>
          </div>
        </div>
      </div>
      <div className="min-w-full p-5">
        <ChannelContents channelID={channelID} />
      </div>
    </main>
  );
}

